<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JavaScript-一篇文章体系化总结</title>
    <link href="/2022/12/10/JavaScript-%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E4%BD%93%E7%B3%BB%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    <url>/2022/12/10/JavaScript-%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E4%BD%93%E7%B3%BB%E5%8C%96%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript体系总结"><a href="#JavaScript体系总结" class="headerlink" title="JavaScript体系总结"></a>JavaScript体系总结</h1><blockquote><p>本文纯属个人学习笔记，如有错误，也请劳烦指出，谢谢~</p></blockquote><ol><li><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="一：js的数据类型分为原始类型和引用数据类型，我们目前可以简单认为原始类型的值是存放在栈中，而引用类型是存放在堆中的，这样有助于我们理解下面的知识。关于数据具体是存放在哪里的，想了解的详情可以看-10-封私信-x2F-28-条消息-JavaScript中变量存储在堆中还是栈中？-知乎-zhihu-com"><a href="#一：js的数据类型分为原始类型和引用数据类型，我们目前可以简单认为原始类型的值是存放在栈中，而引用类型是存放在堆中的，这样有助于我们理解下面的知识。关于数据具体是存放在哪里的，想了解的详情可以看-10-封私信-x2F-28-条消息-JavaScript中变量存储在堆中还是栈中？-知乎-zhihu-com" class="headerlink" title="一：js的数据类型分为原始类型和引用数据类型，我们目前可以简单认为原始类型的值是存放在栈中，而引用类型是存放在堆中的，这样有助于我们理解下面的知识。关于数据具体是存放在哪里的，想了解的详情可以看 (10 封私信 &#x2F; 28 条消息) JavaScript中变量存储在堆中还是栈中？ - 知乎 (zhihu.com)"></a>一：js的数据类型分为原始类型和引用数据类型，我们目前可以简单认为原始类型的值是存放在栈中，而引用类型是存放在堆中的，这样有助于我们理解下面的知识。关于数据具体是存放在哪里的，想了解的详情可以看 <a href="https://www.zhihu.com/question/482433315">(10 封私信 &#x2F; 28 条消息) JavaScript中变量存储在堆中还是栈中？ - 知乎 (zhihu.com)</a></h4><p>原始类型：</p><ul><li>String</li><li>Number</li><li>Boolean</li><li>Undefined</li><li>Symbol</li><li>BigInt</li><li>Null</li></ul><p>引用类型：</p><ul><li>Object</li><li>Array</li><li>Function</li><li>Date</li><li>Set</li><li>Map</li><li>…</li></ul><h4 id="二：判断数据类型的方法"><a href="#二：判断数据类型的方法" class="headerlink" title="二：判断数据类型的方法"></a>二：判断数据类型的方法</h4><ul><li><p>typeof</p><p>先说结论，typeof操作符可以较为精准的判断原始类型，为什么说较为精准，是因为Null是原始类型，但是typeof null却是返回object， 这是因为特殊值 null 被认为是一个对空对象的引用。 </p><p>对于引用类型，除了Function，其他都是直接返回object，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-comment">//&#x27;string&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-number">0</span>)<br><span class="hljs-comment">//&#x27;number&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span>)<br><span class="hljs-comment">//&#x27;boolean&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>)<br><span class="hljs-comment">//&#x27;undefined&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>)<br><span class="hljs-comment">//&#x27;object&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">BigInt</span>(<span class="hljs-number">1</span>))<br><span class="hljs-comment">//&#x27;bigint&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;&#x27;</span>))<br><span class="hljs-comment">//&#x27;symbol&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> &#123;&#125;)<br><span class="hljs-comment">//&#x27;object&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> (<span class="hljs-function">() =&gt;</span> &#123;&#125;))<br><span class="hljs-comment">//  &#x27;function</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> [])<br><span class="hljs-comment">//&#x27;object&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>instanceof</p><p>instanceof用来判断变量是属于哪种引用类型，虽然typeof null 是object类型，但是null其实是个原始类型，因此null instanceof Object是false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">null</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>) <span class="hljs-comment">//  false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(&#123;&#125; <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>)   <span class="hljs-comment">//  true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>)    <span class="hljs-comment">//  true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>)   <span class="hljs-comment">//  true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((<span class="hljs-function">() =&gt;</span> &#123;&#125;) <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span>) <span class="hljs-comment">//  true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((<span class="hljs-function">() =&gt;</span> &#123;&#125;) <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>)   <span class="hljs-comment">//  true</span><br></code></pre></td></tr></table></figure><p>该操作符判断的原理是去寻找类型是否存在于变量所属的原型链中，所以[] 既是Array类型也是Object类型（这里需要了解原型链相关的知识才能理解，但又因为是数据类型相关，所以放在这里）。因此我们也可以写一个方法来模拟instanceof功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">     <br></code></pre></td></tr></table></figure></li><li><p>Object.prototype.toString.call(variable)</p><p>通过该方法就可以简单的获取变量的类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-string">&#x27;&#x27;</span>))<br><span class="hljs-comment">//  [object String]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-number">0</span>))<br><span class="hljs-comment">//  [object Number]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">true</span>))<br><span class="hljs-comment">//  [object Boolean]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">undefined</span>))<br><span class="hljs-comment">//  [object Undefined]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>))<br><span class="hljs-comment">//  [object Null]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-number">1n</span>))<br><span class="hljs-comment">//  [object BigInt]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;&#x27;</span>)))<br><span class="hljs-comment">//  [object Symbol]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(&#123;&#125;))<br><span class="hljs-comment">//  [object Object]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>([]))<br><span class="hljs-comment">//  [object Array]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>((<span class="hljs-function">() =&gt;</span> &#123;&#125;)))<br><span class="hljs-comment">//  [object Function]</span><br></code></pre></td></tr></table></figure><p>因此，也可以简单的把获取变量的逻辑抽离成一个工具函数，思路如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> typeUtils = &#123;<br>    <span class="hljs-title function_">getType</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-keyword">const</span> typeStr = <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(value)<br>        <span class="hljs-keyword">return</span> typeStr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">8</span>,typeStr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>)<br>    &#125;,<br>    <span class="hljs-title function_">isString</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-keyword">return</span> typeUtils.<span class="hljs-title function_">getType</span>(value) === <span class="hljs-string">&#x27;String&#x27;</span><br>    &#125;,<br>    <span class="hljs-title function_">isNumber</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-keyword">return</span> typeUtils.<span class="hljs-title function_">getType</span>(value) === <span class="hljs-string">&#x27;Number&#x27;</span><br>    &#125;,<br>    <span class="hljs-title function_">isFunction</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-keyword">return</span> typeUtils.<span class="hljs-title function_">getType</span>(value) === <span class="hljs-string">&#x27;Function&#x27;</span><br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(typeUtils.<span class="hljs-title function_">getType</span>(<span class="hljs-literal">null</span>))    <span class="hljs-comment">//  Null</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(typeUtils.<span class="hljs-title function_">isString</span>(<span class="hljs-string">&#x27;&#x27;</span>))     <span class="hljs-comment">//  true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(typeUtils.<span class="hljs-title function_">isNumber</span>(<span class="hljs-number">0</span>))      <span class="hljs-comment">//  true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(typeUtils.<span class="hljs-title function_">isFunction</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;)) <span class="hljs-comment">//  true</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="三：关于数据类型个人觉得有些要注意的点"><a href="#三：关于数据类型个人觉得有些要注意的点" class="headerlink" title="三：关于数据类型个人觉得有些要注意的点"></a>三：关于数据类型个人觉得有些要注意的点</h4><ul><li><p>NaN !&#x3D;&#x3D; NaN&#x2F;&#x2F;true</p></li><li><p>typeof NaN    &#x2F;&#x2F;    number</p><p>也就是说NaN是number类型的，所以在对数据做一些判断的时候一定要注意NaN</p></li><li><p>0.1 + 0.2 !&#x3D;&#x3D; 0.3    &#x2F;&#x2F;    true</p><p>这是因为js的精度导致的，解决办法简单的可以都乘100再进行计算，最后除100就可以了，或者直接使用相关库去处理是最稳妥的</p></li></ul><h4 id="四：深浅拷贝"><a href="#四：深浅拷贝" class="headerlink" title="四：深浅拷贝"></a>四：深浅拷贝</h4><p>这里先解释下为什么需要深浅拷贝</p><blockquote><p>我们声明引用变量的时候，真正的值是存放在堆中的，而我们变量保存的是指向该值的一个指针（指针是存放在栈中的），所以我们直接复制一个引用类型的变量，其实是复制一个指向真正的值的一个指针，因此原来的变量和复制后的变量指向的都是相同的值。下面的图源自红宝书：</p></blockquote><p><img src="D:\project\yjf-ll.github.io\source\img\1670684300908.png" alt="1670684300908"></p><p>因此会出现下面的情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj1 = &#123;&#125;<br><span class="hljs-keyword">const</span> obj2 = obj1<br>obj2.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;soul&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1.<span class="hljs-property">name</span>)<br><span class="hljs-comment">//soul</span><br></code></pre></td></tr></table></figure><p>浅拷贝就是创建一个新的对象，再把原对象的值的第一层都复制一遍，因此深层次的属性改变，原对象还是会被影响</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">clone</span>(<span class="hljs-params">source</span>) &#123;<br>    <span class="hljs-keyword">const</span> target = &#123;&#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123;<br>        target[key] = source[key]<br>    &#125;<br>    <span class="hljs-keyword">return</span> target<br>&#125;<br><br><span class="hljs-keyword">const</span> obj1 = &#123;<span class="hljs-attr">ext</span>: &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;soul&#x27;</span>&#125;&#125;<br><span class="hljs-keyword">const</span> obj2 = <span class="hljs-title function_">clone</span>(obj1)<br>obj2.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;soul&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1.<span class="hljs-property">name</span>)<br><span class="hljs-comment">//undefined</span><br>obj2.<span class="hljs-property">ext</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;none&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1.<span class="hljs-property">ext</span>.<span class="hljs-property">name</span>)<br><span class="hljs-comment">//none</span><br></code></pre></td></tr></table></figure><p>深拷贝就是通过递归不断的创建新对象再复制原对象相应的值，简单实现如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepClone</span>(<span class="hljs-params">source</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> source !== <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; source === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> source;<br>    <span class="hljs-keyword">const</span> type = <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(source)<br>    <span class="hljs-keyword">if</span>(type === <span class="hljs-string">&#x27;[object Array]&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> source.<span class="hljs-title function_">map</span>(deepClone)<br>    &#125;<br>    <span class="hljs-keyword">if</span>(type === <span class="hljs-string">&#x27;[object Object]&#x27;</span>) &#123;<br>        <span class="hljs-keyword">const</span> target = &#123;&#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123;<br>            target[key] = <span class="hljs-title function_">deepClone</span>(source[key])<br>        &#125;<br>        <span class="hljs-keyword">return</span> target<br>    &#125;<br>    <span class="hljs-keyword">return</span> source;<br>&#125;<br><br><span class="hljs-keyword">const</span> obj1 = &#123;<span class="hljs-attr">ext</span>: &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;soul&#x27;</span>&#125;&#125;<br><span class="hljs-keyword">const</span> obj2 = <span class="hljs-title function_">deepClone</span>(obj1)<br>obj2.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;soul&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1.<span class="hljs-property">name</span>)<br><span class="hljs-comment">//undefined</span><br>obj2.<span class="hljs-property">ext</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;none&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1.<span class="hljs-property">ext</span>.<span class="hljs-property">name</span>)<br><span class="hljs-comment">//soul</span><br><br><span class="hljs-keyword">const</span> arr1 = []<br><span class="hljs-keyword">const</span> arr2 = <span class="hljs-title function_">deepClone</span>(arr1)<br>arr2.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;test&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1)<br><span class="hljs-comment">//  []</span><br></code></pre></td></tr></table></figure><p>因为有可能克隆的对象会存在互相引用的情况，所以也需要做下处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">cloneDeep</span>(<span class="hljs-params">source</span>) &#123;<br>  <span class="hljs-keyword">const</span> target = &#123;&#125;<br>  <span class="hljs-keyword">const</span> loopList = [<br>    &#123;<br>      <span class="hljs-attr">parent</span>: target,<br>      <span class="hljs-attr">key</span>: <span class="hljs-literal">undefined</span>,<br>      <span class="hljs-attr">data</span>: source<br>    &#125;<br>  ]<br><br>  <span class="hljs-keyword">while</span> (loopList.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-keyword">const</span> node = loopList.<span class="hljs-title function_">pop</span>()<br>    <span class="hljs-keyword">const</span> parent = node.<span class="hljs-property">parent</span><br>    <span class="hljs-keyword">const</span> key = node.<span class="hljs-property">key</span><br>    <span class="hljs-keyword">const</span> data = node.<span class="hljs-property">data</span><br><br>    <span class="hljs-keyword">let</span> res = parent<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> key !== <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>      res = parent[key] = &#123;&#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> data) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Object</span>.<span class="hljs-property">hasOwnProperty</span>.<span class="hljs-title function_">call</span>(data, key)) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> data[key] === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; data[key] !== <span class="hljs-literal">null</span>) &#123;<br>          loopList.<span class="hljs-title function_">push</span>(&#123;<br>            <span class="hljs-attr">parent</span>: res,<br>            key,<br>            <span class="hljs-attr">data</span>: data[key]<br>          &#125;)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          res[key] = data[key]<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> target<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><h4 id="一：全局作用域"><a href="#一：全局作用域" class="headerlink" title="一：全局作用域"></a>一：全局作用域</h4><h4 id="二：块级作用域"><a href="#二：块级作用域" class="headerlink" title="二：块级作用域"></a>二：块级作用域</h4><h4 id="三：函数作用域"><a href="#三：函数作用域" class="headerlink" title="三：函数作用域"></a>三：函数作用域</h4><h4 id="四：作用域链"><a href="#四：作用域链" class="headerlink" title="四：作用域链"></a>四：作用域链</h4></li><li><h3 id="原型链与继承"><a href="#原型链与继承" class="headerlink" title="原型链与继承"></a>原型链与继承</h3></li><li><h3 id="事件循环（EventLoop）"><a href="#事件循环（EventLoop）" class="headerlink" title="事件循环（EventLoop）"></a>事件循环（EventLoop）</h3></li><li><h3 id="异步（Promise-x2F-async-x2F-await）"><a href="#异步（Promise-x2F-async-x2F-await）" class="headerlink" title="异步（Promise&#x2F;async&#x2F;await）"></a>异步（Promise&#x2F;async&#x2F;await）</h3></li><li><h3 id="Dom"><a href="#Dom" class="headerlink" title="Dom"></a>Dom</h3></li><li><h3 id="Bom"><a href="#Bom" class="headerlink" title="Bom"></a>Bom</h3></li><li><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3></li><li><h3 id="常用高阶函数"><a href="#常用高阶函数" class="headerlink" title="常用高阶函数"></a>常用高阶函数</h3></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React-BetterScroll-实现上拉加载下拉刷新</title>
    <link href="/2022/04/12/React-BetterScroll-%E5%AE%9E%E7%8E%B0%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/"/>
    <url>/2022/04/12/React-BetterScroll-%E5%AE%9E%E7%8E%B0%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h5 id="一：前言"><a href="#一：前言" class="headerlink" title="一：前言"></a>一：前言</h5><p>最近使用react在做一个仿bilibili的demo，需要一个滚动容器并且应该有上拉加载和下拉刷新的功能，想到之前用vue做项目的时候用过better-scroll，所以这次也用它了。先放个最终效果图吧，，，</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cfc1231ed99e4a1cbf641a133e7c9812~tplv-k3u1fbpfcp-watermark.image" alt="scroll复杂使用.gif"></p><h5 id="二：better-scroll中无法滚动与解决思路"><a href="#二：better-scroll中无法滚动与解决思路" class="headerlink" title="二：better-scroll中无法滚动与解决思路"></a>二：better-scroll中无法滚动与解决思路</h5><ul><li><p>content容器中放了一些元素却无法滚动</p><blockquote><p>请确认content容器的高度是否超过wrapper</p></blockquote></li><li><p>content容器中有图片的情况下，经常滚不到底部</p><blockquote><p>因为图片可能会在生成bs（better-scroll）实例后才加载完成，导致bs计算高度出错，解决办法是img标签有个回调函数（onLoad），在回调函数里面调用bs实例的refresh方法就好了，假如有很多图片的情况下，最好加上一层防抖，优化性能</p></blockquote></li></ul><h5 id="三：踩坑经验分享"><a href="#三：踩坑经验分享" class="headerlink" title="三：踩坑经验分享"></a>三：踩坑经验分享</h5><p>既然选择了better-scroll做滚动容器，那么我们肯定会对其进行一层封装，以方便我们使用，但是这里把scroll抽出来封装成组件后，会出现这样一个问题，包裹在scroll组件的children中假设有图片的话，就无法在其加载完成后调用scroll的刷新方法，所以这里我使用了eventBus来处理图片加载完要刷新scroll的操作</p><h5 id="三：封装与使用"><a href="#三：封装与使用" class="headerlink" title="三：封装与使用"></a>三：封装与使用</h5><ul><li><p>首先在项目中安装better-scroll（官网（ <a href="https://better-scroll.github.io/docs/zh-CN/guide/base-scroll.html">核心滚动 | BetterScroll 2.0 (better-scroll.github.io)</a> ））</p><blockquote><p>yarn add better-scroll</p></blockquote></li><li><p>在项目的index.js中安装上拉和下拉的组件，这里贴出核心代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs react">import Pulldown from &#x27;@better-scroll/pull-down&#x27;;<br>import Pullup from &#x27;@better-scroll/pull-up&#x27;;<br>import BScroll from &quot;@better-scroll/core&quot;;<br><br>BScroll.use(Pulldown)<br>BScroll.use(Pullup)<br></code></pre></td></tr></table></figure></li><li><p>再安装eventBus</p><blockquote><p>yarn add events</p></blockquote><p>对eventBus做一层封装，这样也方便我们使用和维护</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs react">import &#123;EventEmitter&#125; from &quot;events&quot;;<br><br>const event = new EventEmitter();<br><br>class EventUtils &#123;<br>  static _instance = event;<br><br>  static emit(key, value = []) &#123;<br>    this._instance.emit(key, ...value);<br>  &#125;<br><br>  static addListener(key, callback) &#123;<br>    this._instance.addListener(key, callback);<br>  &#125;<br><br>  static removeListener(key, callback) &#123;<br>    this._instance.removeListener(key, callback);<br>  &#125;<br><br>&#125;<br><br>class EventKey &#123;<br>  static scrollRefresh(event = &#x27;default&#x27;) &#123;<br>    return `$&#123;event&#125;betterScrollRefresh`;<br>  &#125;<br><br>  static scrollToTop(event = &#x27;default&#x27;) &#123;<br>    return `$&#123;event&#125;betterScrollToTop`;<br>  &#125;<br>&#125;<br><br>export &#123;<br>  EventUtils,<br>  EventKey,<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>然后是scroll组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs react">import &#123;debounceUtils&#125; from &quot;../../../utils/function_utils&quot;;<br>import BScroll from &quot;@better-scroll/core&quot;;<br>import &#123;useEffect, useRef, useState&#125; from &quot;react&quot;;<br>import &#123;EventUtils&#125; from &quot;../../../utils/event_utils&quot;;<br>import &#123;PullDownProgress&#125; from &quot;./pull_down_progress&quot;;<br>import &#123;BackTopButton&#125; from &quot;./back_top_button&quot;;<br><br>const pullUpDebounce = debounceUtils()<br>const pullDownDebounce = debounceUtils()<br>const scrollDebounce = debounceUtils()<br><br>class ScrollDirection &#123;<br>  static vertical = &#x27;vertical&#x27;;<br>  static horizontal = &#x27;horizontal&#x27;;<br>&#125;<br><br>export function AppScroll(props) &#123;<br>  //  保存better-scroll实例，在副作用中初始化<br>  const [controller, setController] = useState(null);<br>  const wrapperRef = useRef();<br>  const &#123;<br>    refreshKey = &#x27;default&#x27;,<br>    toKey = &#x27;default&#x27;,<br>    children = (&lt;div&gt;scroll默认的内容&lt;/div&gt;),<br>    scrollWidth = &#x27;100%&#x27;,<br>    scrollHeight = &#x27;100px&#x27;,<br>    scrollBackground = &#x27;rgba(229, 229, 229, 0.29)&#x27;,<br>    direction = ScrollDirection.vertical,<br>    debounceDelay = 200,<br>    prototype = 1,<br>    click = true,<br>    showBackTop = false,<br>    showRefreshProgress = false,<br>    openPullDown = false,<br>    openPullUp = false,<br>    onRefresh = async () =&gt; &#123;&#125;,<br>    onLoadMore = async () =&gt; &#123;&#125;,<br>  &#125; = props;<br><br>  const handlerPullDown = () =&gt; pullDownDebounce(<br>    async () =&gt; &#123;<br>      if (controller === null) return;<br>      console.log(&#x27;下拉&#x27;);<br>      await onRefresh();<br>      controller.finishPullDown();<br>    &#125;, debounceDelay<br>  );<br><br>  const handlerPullUp = () =&gt; pullUpDebounce(<br>    async () =&gt; &#123;<br>      if (controller === null) return;<br>      console.log(&#x27;上拉&#x27;);<br>      await onLoadMore();<br>      controller.finishPullUp();<br>    &#125;, debounceDelay<br>  );<br><br>  const handlerRefresh = () =&gt; scrollDebounce(<br>    () =&gt; &#123;<br>      if (controller === null) return;<br>      console.log(&#x27;刷新bs&#x27;);<br>      controller.refresh();<br>    &#125;, debounceDelay<br>  );<br><br>  const handlerBackTop = () =&gt; &#123;<br>    if (controller === null) return;<br>    controller.scrollTo(0, 0, 300)<br>  &#125;<br><br>  useEffect(() =&gt; &#123;<br>    //  保存父组件或者新生成的better-scroll实例<br>    const instance = new BScroll(wrapperRef.current, &#123;<br>      scrollX: direction === ScrollDirection.horizontal,<br>      scrollY: direction === ScrollDirection.vertical,<br>      pullDownRefresh: openPullDown,<br>      pullUpLoad: openPullUp,<br>      prototype: prototype,<br>      click: click<br>    &#125;);<br>    setController(instance);<br>    return () =&gt; &#123;<br>      console.log(&#x27;AppScroll 销毁&#x27;);<br>      instance.destroy();<br>      setController(null);<br>    &#125;<br>  &#125;, [])<br><br>  useEffect(() =&gt; &#123;<br>    //  给实例添加事件<br>    if (controller === null) return;<br>    if (openPullDown) &#123;<br>      controller.on(&#x27;pullingDown&#x27;, handlerPullDown);<br>    &#125;<br>    if (openPullUp) &#123;<br>      controller.on(&#x27;pullingUp&#x27;, handlerPullUp);<br>    &#125;<br>  &#125;, [handlerPullDown, handlerPullUp])<br><br>  useEffect(() =&gt; &#123;<br>    //  父组件通过eventBus给scroll组件传递事件<br>    //  刷新事件<br>    EventUtils.addListener(refreshKey, handlerRefresh);<br>    //  返回顶部事件<br>    EventUtils.addListener(toKey, handlerBackTop);<br>    return () =&gt; &#123;<br>      EventUtils.removeListener(refreshKey, handlerRefresh);<br>      EventUtils.removeListener(toKey, handlerBackTop);<br>    &#125;<br>  &#125;, [controller, refreshKey, toKey])<br><br>  return (<br>    &lt;div<br>      ref=&#123;wrapperRef&#125;<br>      style=&#123;&#123;<br>        width: scrollWidth,<br>        height: scrollHeight,<br>        background: scrollBackground,<br>        overflow: &#x27;hidden&#x27;<br>      &#125;&#125;<br>    &gt;<br>      &lt;div className=&#123;&quot;content position_relative&quot;&#125;&gt;<br>        &#123;showRefreshProgress &amp;&amp; &lt;PullDownProgress/&gt;&#125;<br>        &#123;children&#125;<br>      &lt;/div&gt;<br>      &#123;showBackTop &amp;&amp; (&lt;BackTopButton click=&#123;handlerBackTop&#125;/&gt;)&#125;<br>    &lt;/div&gt;<br>  )<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="四：实现的效果"><a href="#四：实现的效果" class="headerlink" title="四：实现的效果"></a>四：实现的效果</h5><ul><li><p>简单使用完整代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs react">import &#123;AppScroll&#125; from &quot;../component/app_scroll&quot;;<br><br>function Profile() &#123;<br>  return (<br>    &lt;AppScroll scrollHeight=&#123;&#x27;200px&#x27;&#125;&gt;<br>      &lt;div&gt;xxxxxxxxxxxxxx&lt;/div&gt;<br>      &lt;div&gt;xxxxxxxxxxxxxx&lt;/div&gt;<br>      &lt;div&gt;xxxxxxxxxxxxxx&lt;/div&gt;<br>      &lt;div&gt;xxxxxxxxxxxxxx&lt;/div&gt;<br>      &lt;div&gt;xxxxxxxxxxxxxx&lt;/div&gt;<br>      &lt;div&gt;xxxxxxxxxxxxxx&lt;/div&gt;<br>      &lt;div&gt;xxxxxxxxxxxxxx&lt;/div&gt;<br>      &lt;div&gt;xxxxxxxxxxxxxx&lt;/div&gt;<br>      &lt;div&gt;xxxxxxxxxxxxxx&lt;/div&gt;<br>      &lt;div&gt;xxxxxxxxxxxxxx&lt;/div&gt;<br>      &lt;div&gt;xxxxxxxxxxxxxx&lt;/div&gt;<br>      &lt;div&gt;xxxxxxxxxxxxxx&lt;/div&gt;<br>      &lt;div&gt;xxxxxxxxxxxxxx&lt;/div&gt;<br>      &lt;div&gt;xxxxxxxxxxxxxx&lt;/div&gt;<br>      &lt;div&gt;xxxxxxxxxxxxxx&lt;/div&gt;<br>      &lt;div&gt;xxxxxxxxxxxxxx&lt;/div&gt;<br>      &lt;div&gt;xxxxxxxxxxxxxx&lt;/div&gt;<br>      &lt;div&gt;xxxxxxxxxxxxxx&lt;/div&gt;<br>      &lt;div&gt;xxxxxxxxxxxxxx&lt;/div&gt;<br>      &lt;div&gt;xxxxxxxxxxxxxx&lt;/div&gt;<br>      &lt;div&gt;xxxxxxxxxxxxxx&lt;/div&gt;<br>    &lt;/AppScroll&gt;<br>  )<br>&#125;<br><br>export default Profile<br></code></pre></td></tr></table></figure></li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b47228b077b4991ab0eeed6146e6e5e~tplv-k3u1fbpfcp-watermark.image" alt="scroll简单使用.gif"></p><ul><li><p>复杂使用完整代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs react">import &quot;../../../../assets/css/home.css&quot;<br>import &#123;useCallback, useEffect, useState&#125; from &quot;react&quot;;<br>import VideoRow from &quot;../../component/video_row&quot;;<br>import &#123;homeInfoApi&#125; from &quot;../../../../network/api&quot;;<br>import &#123;HomeDataModel&#125; from &quot;../../../../network/model&quot;;<br>import &#123;AppScroll&#125; from &quot;../../component/app_scroll&quot;;<br>import &#123;EventKey, EventUtils&#125; from &quot;../../../../utils/event_utils&quot;;<br><br>function HomeContent(props) &#123;<br>  const &#123;tag&#125; = props;<br>  let [homeData, setHomeData] = useState(new HomeDataModel());<br>  let [pageIndex, setPageIndex] = useState(1);<br>  const refreshKey = EventKey.scrollRefresh(tag.name);<br>  const toKey = EventKey.scrollToTop(tag.name);<br><br>  useEffect(() =&gt; &#123;<br>    //  切换tab时返回页面的顶部，暂时不做记录之前tab的位置<br>    EventUtils.emit(toKey)<br>  &#125;, [tag])<br><br>  useEffect(() =&gt; &#123;<br>    dataRefresh().then();<br>  &#125;, [tag])<br><br>  async function dataRefresh() &#123;<br>    try &#123;<br>      const response = await homeInfoApi(tag.name);<br>      setPageIndex(1);<br>      setHomeData(response);<br>    &#125; catch (e) &#123;<br>      console.log(e);<br>    &#125;<br>  &#125;<br><br>  async function dataLoadMore() &#123;<br>    try &#123;<br>      const currentPage = pageIndex + 1;<br>      const response = await homeInfoApi(tag.name, currentPage);<br>      const currentHomeData = Object.assign(&#123;&#125;, homeData);<br>      currentHomeData.videoList = homeData.videoList.concat(response.videoList);<br>      setPageIndex(currentPage);<br>      setHomeData(currentHomeData);<br>    &#125; catch (e) &#123;<br>      console.log(e);<br>    &#125;<br>  &#125;<br><br>  return (<br>    &lt;AppScroll<br>      refreshKey=&#123;refreshKey&#125;<br>      toKey=&#123;toKey&#125;<br>      scrollHeight=&#123;&#x27;calc(100vh - 56px * 3)&#x27;&#125;<br>      scrollBackground=&#123;&#x27;rgba(229, 229, 229, 0.29)&#x27;&#125;<br>      showRefreshProgress=&#123;true&#125;<br>      showBackTop=&#123;true&#125;<br>      openPullDown=&#123;true&#125;<br>      onRefresh=&#123;dataRefresh&#125;<br>      openPullUp=&#123;true&#125;<br>      onLoadMore=&#123;dataLoadMore&#125;<br>    &gt;<br>      &lt;div className=&#123;&quot;home_content_container&quot;&#125;&gt;<br>        &#123;<br>          homeData.videoList.map((item, index) =&gt;<br>            &lt;VideoRow<br>              &#123;<br>                ...Object.assign(<br>                  item, &#123;imgLoaded: () =&gt; EventUtils.emit(refreshKey)&#125;<br>                )<br>              &#125;<br>              key=&#123;item.vid + index&#125;<br>            /&gt;<br>          )<br>        &#125;<br>      &lt;/div&gt;<br>    &lt;/AppScroll&gt;<br>  )<br>&#125;<br><br>export default HomeContent<br></code></pre></td></tr></table></figure></li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c74710e4f654420bc27d00b8984dcf2~tplv-k3u1fbpfcp-watermark.image" alt="scroll复杂使用.gif"></p><ul><li>ok，到这里就完结了，记录下自己的经验，也希望能帮助屏幕前的你，有啥问题也欢迎在评论区讨论  ^_^</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>React</category>
      
      <category>前端插件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>React</tag>
      
      <tag>BetterScroll</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript-深浅拷贝</title>
    <link href="/2022/03/03/JavaScript-%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <url>/2022/03/03/JavaScript-%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<h5 id="一：前言"><a href="#一：前言" class="headerlink" title="一：前言"></a>一：前言</h5><blockquote><p>js的数据分为基本类型和引用类型，基本类型的值是保存在栈内存中，引用类型的值是保存在堆内存中，并且用变量保存一个引用类型值，其实是保存指向该值的一个指针，因此对复制后的对象进行一些操作，也会影响被复制的对象，可以看一个简单的例子</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">let <span class="hljs-selector-tag">a</span> = &#123;&#125;<br>let <span class="hljs-selector-tag">b</span> = <span class="hljs-selector-tag">a</span><br><span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.name</span> = <span class="hljs-string">&#x27;soul&#x27;</span><br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-selector-tag">a</span>.name)<br><span class="hljs-comment">//  soul</span><br></code></pre></td></tr></table></figure><blockquote><p>解析：因为a保存的是{}在内存中的地址指针，所以b&#x3D;a，也就相当于b保存的也是{}在内存中的地址指针，所以我们对b进行一些操作，也会影响a</p></blockquote><ul><li><p>基本类型</p><ul><li>string</li><li>number</li><li>boolean</li><li>undefined</li><li>null</li><li>symbol</li></ul></li><li><p>引用类型</p><ul><li>function</li><li>array</li><li>object</li></ul></li></ul><h5 id="二：浅拷贝"><a href="#二：浅拷贝" class="headerlink" title="二：浅拷贝"></a>二：浅拷贝</h5><p>简单的说，浅拷贝就是新建一个对象（在内存中开辟了新的地盘），来保存我们目标对象的值，这样，我们操作拷贝后的值，就不会影响最开始的对象了</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">let <span class="hljs-selector-tag">a</span> = &#123;&#125;<br>let <span class="hljs-selector-tag">b</span> = <span class="hljs-built_in">clone</span>(a)<br><span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.name</span> = <span class="hljs-string">&#x27;soul&#x27;</span><br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-selector-tag">a</span>.name)<br><span class="hljs-comment">//  undefined</span><br></code></pre></td></tr></table></figure><p>可以看到，我们修改拷贝后的对象b，并不会影响原对象a的值，实现方法如下，然后该方法主要的思路是，假设obj是数组，那就新建一个数组通过遍历把所有的数据复制一边，假设是对象，也把对象的值复制一边返回出去，如果是其他类型的值，就直接返回</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs haxe">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clone</span></span>(obj) &#123;<br>    <span class="hljs-keyword">if</span>(obj == <span class="hljs-literal">null</span> || obj instanceof Function) <span class="hljs-keyword">return</span> obj;<br>    <span class="hljs-keyword">if</span>(obj instanceof <span class="hljs-keyword">Array</span>) &#123;<br>      let <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span> = []<br>      obj.forEach(item =&gt; <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span>.push(item))<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(obj instanceof Object) &#123;<br>      let <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span> = &#123;&#125;<br>      <span class="hljs-keyword">for</span>(let item <span class="hljs-keyword">in</span> obj) &#123;<br>        <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span>[item] = obj[item]<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> obj<br>&#125;<br></code></pre></td></tr></table></figure><p>仔细看过上面的方法就会发现，浅拷贝其实就是遍历了一层然后直接复制而已，那假如该对象有引用类型的值呢，那浅拷贝也只是把指向引用类型的指针拷贝过来，因此浅拷贝不适合复制有引用类型属性的对象，看以下demo</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus">let <span class="hljs-selector-tag">a</span> = &#123;<br>  name: <span class="hljs-string">&#x27;soul&#x27;</span>,<br>  job: &#123;<br>    name: <span class="hljs-string">&#x27;前端&#x27;</span><br>  &#125;<br>&#125;<br>​<br>let <span class="hljs-selector-tag">b</span> = <span class="hljs-built_in">clone</span>(a)<br><span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.name</span> = <span class="hljs-string">&#x27;zs&#x27;</span><br><span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.job</span><span class="hljs-selector-class">.name</span> = <span class="hljs-string">&#x27;后端&#x27;</span><br>​<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-selector-tag">a</span>.name)<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.job</span>.name)<br><span class="hljs-comment">//  soul</span><br><span class="hljs-comment">//  后端</span><br></code></pre></td></tr></table></figure><blockquote><p>这里a的name没受影响，a的job的name却收到影响，因为a的job是引用类型的值，保存的是指向该值在内存中的指针，我们进行浅拷贝，也就相当于复制了这个指针，因此a和b的job指向的是同一个值，所以修改b的job的name，a的job的name也变化了</p></blockquote><h5 id="三：深拷贝"><a href="#三：深拷贝" class="headerlink" title="三：深拷贝"></a>三：深拷贝</h5><p>分析浅拷贝后的弊端，我们发现，想要真正复制某个对象，遍历一层是不够的，因此，我们遍历的同时也要判断该属性的值是否为引用类型，如果是的话，应该再复制一层，使用递归可以很好的实现我们想要的，</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs haxe">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span></span>(obj) &#123;<br>    <span class="hljs-keyword">if</span>(obj == <span class="hljs-literal">null</span> || obj instanceof Function) <span class="hljs-keyword">return</span> obj;<br>    <span class="hljs-keyword">if</span>(obj instanceof <span class="hljs-keyword">Array</span>) &#123;<br>      let <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span> = []<br>      <span class="hljs-comment">//  把数组中的项通过deepClone进行递归调用</span><br>      obj.forEach(item =&gt; <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span>.push(deepClone(item)))<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(obj instanceof Object) &#123;<br>      let <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span> = &#123;&#125;<br>      <span class="hljs-keyword">for</span>(let item <span class="hljs-keyword">in</span> obj) &#123;<br>        <span class="hljs-comment">//  把对象中的值通过deepClone进行递归调用</span><br>        <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span>[item] = deepClone(obj[item])<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> obj<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">  let b = deepClone(a)<br>  b.name = <span class="hljs-string">&#x27;zs&#x27;</span>;<br>  b.job.name = <span class="hljs-string">&#x27;ctrl c&#x27;</span><br>  b.job.time.start = <span class="hljs-number">12</span><br>  b.job.time.end = <span class="hljs-number">12</span><br>​<br>  //  使用深拷贝后，修改b的引用类型的值也不会影响a<br>  console.log(a)<br>  console.log(b)<br></code></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f181316c7654cff8643c7ff7ae52338~tplv-k3u1fbpfcp-watermark.image" alt="deepclone.png"></p><h5 id="完结，js的深浅拷贝就谈到这里了，希望对你有所帮助，有更好的实现方法也可以分享出来一起交流哦，：）"><a href="#完结，js的深浅拷贝就谈到这里了，希望对你有所帮助，有更好的实现方法也可以分享出来一起交流哦，：）" class="headerlink" title="完结，js的深浅拷贝就谈到这里了，希望对你有所帮助，有更好的实现方法也可以分享出来一起交流哦，：）"></a>完结，js的深浅拷贝就谈到这里了，希望对你有所帮助，有更好的实现方法也可以分享出来一起交流哦，：）</h5>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>深浅拷贝</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flutter-Bloc-状态管理</title>
    <link href="/2022/03/01/Flutter-Bloc-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
    <url>/2022/03/01/Flutter-Bloc-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h5 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h5><blockquote><p>之前分享过怎么封装dio，今天就分享下使用bloc如何做网络请求吧，下面放一些你可能需要的资料，^_^</p></blockquote><ul><li>dio封装：<a href="https://juejin.cn/post/7065524382562533412">https://juejin.cn/post/7065524382562533412</a></li><li>bloc官网：<a href="https://bloclibrary.dev/#/zh-cn/gettingstarted">https://bloclibrary.dev/#/zh-cn/gettingstarted</a></li><li>小呆呆分享的bloc入门教程，写的很好：<a href="https://juejin.cn/post/6856268776510504968#heading-1">https://juejin.cn/post/6856268776510504968#heading-1</a></li></ul><h5 id="一：Bloc简介"><a href="#一：Bloc简介" class="headerlink" title="一：Bloc简介"></a>一：Bloc简介</h5><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0292fd3b68c14d02aa6376710798059c~tplv-k3u1fbpfcp-watermark.image" alt="bloc.png"></p><blockquote><p>bloc是个状态管理框架，可以做到UI和逻辑分离，并且数据也能复用，举个例子，你用bloc写了一个获取用户信息的模板，然后你在首页或者在其他地方都能使用该bloc直接获取用户信息，直接看代码吧</p></blockquote><h5 id="二：Bloc使用"><a href="#二：Bloc使用" class="headerlink" title="二：Bloc使用"></a>二：Bloc使用</h5><ul><li><p>先添加这个库</p><blockquote><p>&#x2F;&#x2F; 这里安装的是7.0.1版本的，高版本的bloc写法会有些区别</p><p>dependencies:<br>flutter_bloc:  7.0.1</p></blockquote></li><li><p>创建一个网络请求的类</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:async&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:dio/dio.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_network/network/network.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeRepository</span> </span>&#123;<br>  <span class="hljs-keyword">final</span> Dio dio = Network.instance;<br><br>  Future&lt;<span class="hljs-built_in">String</span>&gt; getData() <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-comment">//  在这里网络请求，然后返回出去，我这里是返回模拟的数据</span><br>    <span class="hljs-keyword">final</span> result = <span class="hljs-keyword">await</span> Future.delayed(<span class="hljs-built_in">Duration</span>(seconds: <span class="hljs-number">2</span>), () &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello world&#x27;</span>;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>通过插件创建bloc的模板</p></li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ded11cd0f49a4db8b7abb81b9e747d5b~tplv-k3u1fbpfcp-watermark.image" alt="bloc_temp.png"></p><ul><li><p>创建一个状态枚举，作用是描述当前网络请求的状态</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">enum</span> Status &#123;<br>  <span class="hljs-comment">//  初始化</span><br>  pure,<br>  <span class="hljs-comment">//  加载中</span><br>  progress,<br>  <span class="hljs-comment">//  请求成功</span><br>  success,<br>  <span class="hljs-comment">//  请求失败</span><br>  failure,<br>&#125;<br><br><span class="hljs-keyword">extension</span> <span class="hljs-built_in">Function</span> <span class="hljs-keyword">on</span> Status &#123;<br>  <span class="hljs-comment">//  扩展枚举的一些方法</span><br>  <span class="hljs-built_in">bool</span> <span class="hljs-keyword">get</span> isPure =&gt; <span class="hljs-keyword">this</span> == Status.pure;<br><br>  <span class="hljs-built_in">bool</span> <span class="hljs-keyword">get</span> isProgress =&gt; <span class="hljs-keyword">this</span> == Status.progress;<br><br>  <span class="hljs-built_in">bool</span> <span class="hljs-keyword">get</span> isSuccess =&gt; <span class="hljs-keyword">this</span> == Status.success;<br><br>  <span class="hljs-built_in">bool</span> <span class="hljs-keyword">get</span> isFailure =&gt; <span class="hljs-keyword">this</span> == Status.failure;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改state文件为：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">part</span> of <span class="hljs-string">&#x27;home_bloc.dart&#x27;</span>;<br><br><span class="hljs-meta">@immutable</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeState</span> </span>&#123;<br>  <span class="hljs-comment">//  请求的状态</span><br>  <span class="hljs-keyword">final</span> Status status;<br><br>  <span class="hljs-comment">//  请求成功后的数据</span><br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> data;<br><br>  <span class="hljs-comment">//  请求失败的错误</span><br>  <span class="hljs-keyword">final</span> Exception? exception;<br><br>  <span class="hljs-comment">//  私有命名构造函数</span><br>  HomeState._(&#123;<br>    <span class="hljs-keyword">required</span> <span class="hljs-keyword">this</span>.status,<br>    <span class="hljs-keyword">required</span> <span class="hljs-keyword">this</span>.data,<br>    <span class="hljs-keyword">this</span>.exception,<br>  &#125;);<br><br>  <span class="hljs-comment">//  工厂构造函数，bloc通过该构造函数来初始化真正的state</span><br>  <span class="hljs-keyword">factory</span> HomeState.init() =&gt; HomeState._(<br>        status: Status.pure,<br>        data: <span class="hljs-string">&#x27;&#x27;</span>,<br>      );<br><br>  <span class="hljs-comment">//  生成的实例通过该方法来生成新的state返回出去</span><br>  HomeState copyWith(&#123;<br>    Status? status,<br>    <span class="hljs-built_in">String?</span> data,<br>    Exception? exception,<br>  &#125;) =&gt;<br>      HomeState._(<br>        status: status ?? <span class="hljs-keyword">this</span>.status,<br>        data: data ?? <span class="hljs-keyword">this</span>.data,<br>        exception: exception,<br>      );<br>&#125;<br><br><br></code></pre></td></tr></table></figure></li><li><p>添加网络请求的事件</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">part</span> of <span class="hljs-string">&#x27;home_bloc.dart&#x27;</span>;<br><br><span class="hljs-meta">@immutable</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeEvent</span> </span>&#123;&#125;<br><span class="hljs-comment">//  网络请求的事件</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeDataLoaded</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HomeEvent</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p>在bloc中对上面的事件添加逻辑处理</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:async&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:bloc/bloc.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_network/view/model/status.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_network/view/repository/home_repository.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:meta/meta.dart&#x27;</span>;<br><br><span class="hljs-keyword">part</span> <span class="hljs-string">&#x27;home_event.dart&#x27;</span>;<br><span class="hljs-keyword">part</span> <span class="hljs-string">&#x27;home_state.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeBloc</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Bloc</span>&lt;<span class="hljs-title">HomeEvent</span>, <span class="hljs-title">HomeState</span>&gt; </span>&#123;<br>  <span class="hljs-comment">//  存储库的实例，用于网络请求</span><br>  <span class="hljs-keyword">final</span> HomeRepository repository = HomeRepository();<br><br>  HomeBloc() : <span class="hljs-keyword">super</span>(HomeState.init());<br><br>  <span class="hljs-meta">@override</span><br>  Stream&lt;HomeState&gt; mapEventToState(<br>    HomeEvent event,<br>  ) <span class="hljs-keyword">async</span>* &#123;<br>    <span class="hljs-comment">//  如果是这个事件那就进行里面的处理</span><br>    <span class="hljs-keyword">if</span>(event <span class="hljs-keyword">is</span> HomeDataLoaded) &#123;<br>      <span class="hljs-keyword">yield</span>* _mapHomeDataLoadedToState();<br>    &#125;<br>  &#125;<br><br>  Stream&lt;HomeState&gt; _mapHomeDataLoadedToState() <span class="hljs-keyword">async</span>* &#123;<br>    <span class="hljs-comment">//  先把状态改成加载中</span><br>    <span class="hljs-keyword">yield</span> state.copyWith(status: Status.progress);<br><br>    <span class="hljs-keyword">yield</span> <span class="hljs-keyword">await</span> repository.getData().then((value) &#123;<br>      <span class="hljs-comment">//  成功了就把状态改成成功，并且保存下数据</span><br>      <span class="hljs-keyword">return</span> state.copyWith(status: Status.success, data: value);<br>    &#125;).onError((Exception? error, stackTrace) &#123;<br>      <span class="hljs-comment">//  失败了就把状态改成失败，并且保存下错误消息</span><br>      <span class="hljs-keyword">return</span> state.copyWith(status: Status.failure, exception: error);<br>    &#125;);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>具体怎么使用呢，请看代码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_bloc/flutter_bloc.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_network/view/bloc/home_bloc.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_network/view/model/status.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomePage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> HomePage(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br><br>    <span class="hljs-comment">//  这里使用BlocBuilder包裹我们想要使用bloc数据的widget</span><br>    <span class="hljs-keyword">final</span> content = BlocBuilder&lt;HomeBloc, HomeState&gt;(builder: (context, state) &#123;<br>      <span class="hljs-keyword">return</span> Column(<br>        children: [<br>          state.status.isProgress<br>              ? CircularProgressIndicator(<br>            color: Colors.blue,<br>          )<br>              : Text(<br>              state.data.toString()<br>          ),<br>          IconButton(<br>            icon: Icon(Icons.add),<br>            onPressed: () &#123;<br>              context.read&lt;HomeBloc&gt;().add(HomeDataLoaded());<br>            &#125;,<br>          )<br>        ],<br>      );<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(title: Text(<span class="hljs-string">&#x27;Bloc &amp; Dio&#x27;</span>),centerTitle: <span class="hljs-keyword">true</span>),<br>      body: Center(<br>        <span class="hljs-comment">//  这里创建我们的bloc</span><br>        child: BlocProvider(<br>          create: (context) =&gt; HomeBloc(),<br>          child: content,<br>        ),<br>      ),<br>    );<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3417f8c1d3f44c1db8f1d2a8174a82c6~tplv-k3u1fbpfcp-watermark.image" alt="QQ图片20220302135124.gif"></p><ul><li><p>如果想要在页面一进去就自动加载请求的话，在创建该bloc的时候通过级联操作符，直接添加事件就可以了</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">BlocProvider</span>(<br>  <span class="hljs-attribute">create</span>: (context) =&gt; <span class="hljs-built_in">HomeBloc</span>()..<span class="hljs-built_in">add</span>(<span class="hljs-built_in">HomeDataLoaded</span>()),<br>  <span class="hljs-attribute">child</span>: content,<br>)<br></code></pre></td></tr></table></figure></li></ul><h5 id="OK，感谢看完的小伙伴。：）"><a href="#OK，感谢看完的小伙伴。：）" class="headerlink" title="OK，感谢看完的小伙伴。：）"></a>OK，感谢看完的小伙伴。：）</h5>]]></content>
    
    
    <categories>
      
      <category>Flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flutter</tag>
      
      <tag>Bloc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React-Axios网络请求封装</title>
    <link href="/2022/02/27/React-Axios%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85/"/>
    <url>/2022/02/27/React-Axios%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h5 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h5><blockquote><p>在接触dio库和axios库后，感觉网络请求的操作基本都差不多，主要思路都是对库的网络请求实例进行通用的配置以及添加一些拦截器，然后对配置后的实例再封装一层通用的请求函数，这样做的好处在于随时可以更换底层网络请求库，再也不怕网络请求库不维护或者有重大bug啦！！！虽然这种概率极小，，，</p></blockquote><h5 id="一：封装思路如下"><a href="#一：封装思路如下" class="headerlink" title="一：封装思路如下"></a>一：封装思路如下</h5><ul><li>生成一个axios实例，传入通用的配置</li><li>添加请求拦截器</li><li>封装请求函数</li><li>基本使用</li></ul><h5 id="二：代码演示"><a href="#二：代码演示" class="headerlink" title="二：代码演示"></a>二：代码演示</h5><blockquote><p>生成axios实例并添加通用的配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs react">const instance = axios.create(&#123;<br>  baseURL: &#x27;https://www.xxx.api&#x27;,<br>  timeout: 8000,<br>  headers: &#123;<br>    &#x27;xxx-ffff&#x27;: &#x27;fa&#x27;,<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>添加拦截器，请求的时候判断是否需要添加token，得到结果后，假如code不是200或者0或2000，就判断该结果不是成功的，就使用throw把结果当成错误抛出</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs react">instance.interceptors.request.use((config) =&gt; &#123;<br>  const token = getToken();<br>  if(token !== null &amp;&amp; token !== undefined) &#123;<br>    config.headers[&#x27;boarding-pass&#x27;] = token;<br>  &#125;<br>  return config;<br>&#125;, error =&gt; &#123;<br>  return error;<br>&#125;)<br><br>instance.interceptors.response.use(res =&gt; &#123;<br>  const &#123;code&#125; = res.data;<br>  if(code !== 200 &amp;&amp; code !== 0 &amp;&amp; code !== 2000) &#123;<br>    console.log(&#x27;请求成功，但被拦截的数据&#x27;,res)<br>    throw res.data;<br>  &#125;<br>  return res.data;<br>&#125;, error =&gt; &#123;<br>  return error;<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p> 对该实例封装一层通用的请求方法，我练习的接口比较简单，所以只添加三个参数，也可以添加其他的参数，具体看你！</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs react">function request(method, url, params) &#123;<br>  return instance.request(&#123;<br>    method: method,<br>    url: url,<br>    params: params<br>  &#125;);<br>&#125;<br><br>export &#123;<br>  request<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>好，封装该请求函数后，怎么使用就比较简单了</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs react">// 我自己会把具体请求再封装一层，就不会在UI组件里面搞得乱乱的了，也能在其他组件里复用该请求方法，<br>function apiSignIn(params) &#123;<br>  return request(<br>    &#x27;post&#x27;,<br>    &#x27;/user/login&#x27;,<br>    params,<br>  );<br>&#125;<br><br>export &#123;apiSignIn&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs react">// 真正使用的地方如下：<br>function signIn() &#123;<br>  const query = &#123;<br>   userName: &#x27;xxxxxxx&#x27;,<br>   password: &#x27;xxxxxxx&#x27;<br>  &#125;<br>  apiSignIn(<br>   query<br>  ).then(res =&gt; &#123;<br>    console.log(res)<br>  &#125;).catch(err =&gt; &#123;<br>    console.log(err)<br>  &#125;);<br>&#125;<br>&lt;Button<br>  type=&quot;primary&quot;<br>  size=&#123;&quot;large&quot;&#125;<br>  onClick=&#123;() =&gt; signIn()&#125;<br>&gt;<br>    SignIn<br>&lt;/Button&gt;<br></code></pre></td></tr></table></figure><h6 id="ok，到这里就over了，感谢看完的小伙伴，有更好的方式也可以交流哈，："><a href="#ok，到这里就over了，感谢看完的小伙伴，有更好的方式也可以交流哈，：" class="headerlink" title="ok，到这里就over了，感谢看完的小伙伴，有更好的方式也可以交流哈，：)"></a>ok，到这里就over了，感谢看完的小伙伴，有更好的方式也可以交流哈，：)</h6>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>React</tag>
      
      <tag>Axios</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flutter使用Dio进行网络交互</title>
    <link href="/2022/02/17/Flutter%E4%BD%BF%E7%94%A8Dio%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E4%BA%A4%E4%BA%92/"/>
    <url>/2022/02/17/Flutter%E4%BD%BF%E7%94%A8Dio%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E4%BA%A4%E4%BA%92/</url>
    
    <content type="html"><![CDATA[<h1 id="Flutter-amp-Dio-网络交互"><a href="#Flutter-amp-Dio-网络交互" class="headerlink" title="Flutter &amp; Dio 网络交互"></a>Flutter &amp; Dio 网络交互</h1><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote><p>flutter做网络请求目前最火的就是Dio库了，那么如何使用该库呢，怎么进行一个通用的封装呢，封装技巧能复用嘛？请看下文：</p></blockquote><h5 id="一：安装dio库-dio-4-0-4-官方地址传送门：https-github-com-flutterchina-dio-blob-master-README-ZH-md"><a href="#一：安装dio库-dio-4-0-4-官方地址传送门：https-github-com-flutterchina-dio-blob-master-README-ZH-md" class="headerlink" title="一：安装dio库 (dio: ^4.0.4) 官方地址传送门：https://github.com/flutterchina/dio/blob/master/README-ZH.md"></a>一：安装dio库 (dio: ^4.0.4) 官方地址传送门：<a href="https://github.com/flutterchina/dio/blob/master/README-ZH.md">https://github.com/flutterchina/dio/blob/master/README-ZH.md</a></h5><blockquote><p>flutter pub add dio</p></blockquote><h5 id="二：dio的基本使用"><a href="#二：dio的基本使用" class="headerlink" title="二：dio的基本使用"></a>二：dio的基本使用</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:dio/dio.dart&#x27;</span>;<br><br><span class="hljs-comment">//  这里使用的是网易云api，感谢开源感谢分享！官方地址传送门：</span><br><span class="hljs-comment">// https://binaryify.github.io/NeteaseCloudMusicApi/#/</span><br><br><span class="hljs-keyword">void</span> send() <span class="hljs-keyword">async</span> &#123;<br>   <span class="hljs-keyword">final</span> query = &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">186016</span>, <span class="hljs-string">&#x27;limit&#x27;</span>: <span class="hljs-number">1</span>&#125;;<br>   <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 实例化Dio，传入参数做一个get请求</span><br>      <span class="hljs-keyword">final</span> result = <span class="hljs-keyword">await</span> Dio().<span class="hljs-keyword">get</span>(<br>          <span class="hljs-string">&#x27;http://123.207.32.32:9001/comment/music&#x27;</span>,<br>          queryParameters: query,<br>      );<br>        <span class="hljs-comment">// 打印结果</span><br>      <span class="hljs-built_in">print</span>(result);<br>   &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-comment">// 打印异常</span><br>      <span class="hljs-built_in">print</span>(e);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>使用dio的步骤就是，实例化一个Dio，使用该实例做某些请求（也许会传入一些参数），那么问题来了，每个页面都要生成这样的一个实例嘛？或者说有方法可以更好的管理dio，答案是有的，各位看官请继续：</p></blockquote><h5 id="三：dio的基本封装"><a href="#三：dio的基本封装" class="headerlink" title="三：dio的基本封装"></a>三：dio的基本封装</h5><blockquote><p>一般来说，主要是对请求的配置信息，和网络拦截器做一个通用的封装，这边采取的思路是使用一个类来保存dio的实例，然后全局都可以使用该实例进行网络请求</p></blockquote><ul><li><p>编写网络配置类</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NetworkConfig</span> </span>&#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-built_in">String</span> baseUrl = <span class="hljs-string">&#x27;http://123.207.32.32:9001/&#x27;</span>;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> sendTimeout = <span class="hljs-number">8000</span>;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> connectTimeout = <span class="hljs-number">8000</span>;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> receiveTimeout = <span class="hljs-number">8000</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写接口工具类（保存常用的接口，好管理）</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EndPoint</span> &#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-built_in">String</span> comment = <span class="hljs-string">&#x27;comment/music&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写dio的拦截器</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//   拦截器可以做很多事情，具体可以看一下官方文档</span><br><span class="hljs-comment">//  假如我们在请求的时候需要添加token，那么就可以在onRequest里面进行处理</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NetworkIntercept</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Interceptor</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> onRequest(RequestOptions options, RequestInterceptorHandler handler) &#123;<br>    <span class="hljs-comment">//  这里的AppCache缓存类在我的上一篇文章里有讲，有需要可以查看</span><br>    <span class="hljs-comment">//   从缓存中添加token，这里只是举一个例子，也有其他方式添加token</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">String?</span> token = AppCache.token;<br>    <span class="hljs-keyword">if</span> (token != <span class="hljs-keyword">null</span>) &#123;<br>      options.headers[<span class="hljs-string">&#x27;token&#x27;</span>] = token;<br>    &#125;<br>    <span class="hljs-keyword">super</span>.onRequest(options, handler);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> onResponse(Response response, ResponseInterceptorHandler handler) &#123;<br>      <span class="hljs-keyword">super</span>.onResponse(response, handler);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> onError(DioError err, ErrorInterceptorHandler handler) &#123;<br>    <span class="hljs-keyword">super</span>.onError(err, handler);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写保存dio的单例类，</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:dio/dio.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_network/cache/cache.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_network/network/network_config.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Network</span> </span>&#123;<br>  <span class="hljs-keyword">final</span> Dio dio;<br><br>  Network._(&#123;<span class="hljs-keyword">required</span> <span class="hljs-keyword">this</span>.dio&#125;);<br><br>  <span class="hljs-keyword">factory</span> Network._create(Dio dio) =&gt; Network._(dio: dio);<br><br>  <span class="hljs-keyword">static</span> Network? _client;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> init() &#123;<br>    <span class="hljs-keyword">if</span> (_client == <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-comment">//  创建配置信息</span><br>      <span class="hljs-keyword">final</span> BaseOptions options = BaseOptions(<br>        baseUrl: NetworkConfig.baseUrl,<br>        sendTimeout: NetworkConfig.sendTimeout,<br>        connectTimeout: NetworkConfig.connectTimeout,<br>        receiveTimeout: NetworkConfig.receiveTimeout,<br>      );<br><br>      <span class="hljs-comment">//  创建dio实例，并且添加配置信息</span><br>      <span class="hljs-keyword">final</span> Dio dio = Dio(options);<br><br>      <span class="hljs-comment">//  对dio添加上面的拦截器</span><br>      dio.interceptors.add(NetworkIntercept());<br><br>      <span class="hljs-comment">//  创建network实例并保存</span><br>      _client = Network._create(dio);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//  对外返回处理过的dio实例</span><br>  <span class="hljs-keyword">static</span> Dio <span class="hljs-keyword">get</span> instance =&gt; _client!.dio;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>封装后需要在main函数里面进行一次初始化，代码如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_network/cache/cache.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_network/network/network.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_network/view/home_page.dart&#x27;</span>;<br><br>Future&lt;<span class="hljs-keyword">void</span>&gt; main() <span class="hljs-keyword">async</span> &#123;<br>  WidgetsFlutterBinding.ensureInitialized();<br>  <span class="hljs-comment">//  初始化缓存单例类</span><br>  <span class="hljs-comment">//  这里的AppCache缓存类在我的上一篇文章里有讲，有需要可以查看</span><br>  <span class="hljs-keyword">await</span> AppCache.init();<br>  <span class="hljs-comment">//  初始化网络单例类</span><br>  Network.init();<br>  runApp(MyApp());<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      theme: ThemeData(<br>        primarySwatch: Colors.blue,<br>      ),<br>      home: HomePage(),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>那么封装好后，我们应该如何使用呢？简单，上代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:dio/dio.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_network/network/end_point.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_network/network/network.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomePage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> HomePage(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  _HomePageState createState() =&gt; _HomePageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_HomePageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">HomePage</span>&gt; </span>&#123;<br>  <span class="hljs-comment">//  引用网络单例类里面封装好的dio</span><br>  <span class="hljs-keyword">final</span> Dio dio = Network.instance;<br><br>  Future&lt;<span class="hljs-keyword">void</span>&gt; send() <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">final</span> query = &#123;<br>      <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">186016</span>,<br>      <span class="hljs-string">&#x27;limit&#x27;</span>: <span class="hljs-number">1</span>,<br>    &#125;;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">final</span> result = <span class="hljs-keyword">await</span> dio.<span class="hljs-keyword">get</span>(<br>        EndPoint.comment,<br>        queryParameters: query,<br>      );<br>      <span class="hljs-built_in">print</span>(result);<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>      <span class="hljs-built_in">print</span>(e);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&#x27;Network&#x27;</span>),<br>        centerTitle: <span class="hljs-keyword">true</span>,<br>      ),<br>      body: Center(<br>        child: FloatingActionButton(<br>          onPressed: send,<br>          child: Text(<span class="hljs-string">&#x27;点击&#x27;</span>),<br>        ),<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>至此，dio的简单封装教程就结束了，有啥不懂得可以在评论区留言，或者有更好的方法也可以一起分享，感谢看完的铁铁们！：） 封装的技巧都是通用的，活学活用才是王道！</p></li><li><p>完整demo地址：<a href="https://github.com/yjf-ll/flutter_dio_network">https://github.com/yjf-ll/flutter_dio_network</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flutter</tag>
      
      <tag>Dio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分享Flutter使用缓存的一些经验</title>
    <link href="/2022/01/13/test/"/>
    <url>/2022/01/13/test/</url>
    
    <content type="html"><![CDATA[<h1 id="flutter-cache"><a href="#flutter-cache" class="headerlink" title="flutter_cache"></a>flutter_cache</h1><h4 id="一：前言"><a href="#一：前言" class="headerlink" title="一：前言"></a>一：前言</h4><p>在项目开发中有一些数据是经常使用的（比如账号，token等），并且希望重新打开app数据也还在，所有这个时候就可以把一些数据放在缓存中保存起来，下次就可以直接从缓存中获取了，借此，封装一个缓存类还是很有必要的，个人封装思路如下:</p><ul><li><p>使用单例封装一个缓存类，在main函数里面初始化，并在类里面添加一些常用的方法</p></li><li><p>封装一个工具类来保存常用的键名</p></li><li><p>demo链接：<a href="https://github.com/yjf-ll/flutter_cache">yjf-ll&#x2F;flutter_cache (github.com)</a></p></li></ul><h4 id="二：废话不多说，现在开始"><a href="#二：废话不多说，现在开始" class="headerlink" title="二：废话不多说，现在开始"></a>二：废话不多说，现在开始</h4><ul><li><p>在项目中添加缓存依赖库，我这里使用的是shared_preferences </p><blockquote><p>flutter pub add shared_preferences</p></blockquote></li><li><p>编写缓存键名工具类</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// 缓存里的值的键名, 格式因人因项目而异，我这里取得比较简单</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CacheKey</span> </span>&#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-built_in">String</span> TOKEN = <span class="hljs-string">&#x27;app_token&#x27;</span>;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-built_in">String</span> PHONE = <span class="hljs-string">&#x27;app_phone&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写缓存类</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppCache</span> </span>&#123;<br>  <span class="hljs-keyword">final</span> SharedPreferences sharedPreferences;<br><br>  AppCache._(&#123;<span class="hljs-keyword">required</span> <span class="hljs-keyword">this</span>.sharedPreferences&#125;);<br><br>  <span class="hljs-keyword">factory</span> AppCache.create(&#123;<br>    <span class="hljs-keyword">required</span> SharedPreferences sharedPreferences,<br>  &#125;) =&gt;<br>      AppCache._(<br>        sharedPreferences: sharedPreferences,<br>      );<br><br>  <span class="hljs-comment">//  缓存类采取单例模式</span><br>  <span class="hljs-keyword">static</span> AppCache? _instance;<br><br>  <span class="hljs-comment">//  一定要在main里面初始化</span><br>  <span class="hljs-keyword">static</span> Future&lt;<span class="hljs-keyword">void</span>&gt; init() <span class="hljs-keyword">async</span> &#123;<br>    _instance ??= AppCache.create(<br>      sharedPreferences: <span class="hljs-keyword">await</span> SharedPreferences.getInstance(),<br>    );<br>  &#125;<br><br>  <span class="hljs-comment">// 简化获取工具类的缓存实例，以便在下方封装一些方法</span><br>  <span class="hljs-keyword">static</span> SharedPreferences <span class="hljs-keyword">get</span> _pre =&gt; _instance!.sharedPreferences;<br><br>  <span class="hljs-comment">//  封装设置token的方法</span><br>  <span class="hljs-keyword">static</span> Future&lt;<span class="hljs-built_in">bool</span>&gt; setToken(<span class="hljs-built_in">String</span> token) <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> _pre.setString(CacheKey.TOKEN, token);<br>  &#125;<br><br>  <span class="hljs-comment">//  封装清除token的方法</span><br>  <span class="hljs-keyword">static</span> Future&lt;<span class="hljs-built_in">bool</span>&gt; cleanToken() <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> _pre.setString(CacheKey.TOKEN, <span class="hljs-string">&#x27;&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">//  封装获取token的方法</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-built_in">String?</span> <span class="hljs-keyword">get</span> token =&gt; _pre.getString(CacheKey.TOKEN);<br><br>  <span class="hljs-comment">//  封装设置phone的方法</span><br>  <span class="hljs-keyword">static</span> Future&lt;<span class="hljs-built_in">bool</span>&gt; setPhone(<span class="hljs-built_in">String</span> phone) <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">return</span> _pre.setString(CacheKey.PHONE, phone);<br>  &#125;<br><br>  <span class="hljs-comment">//  封装清除phone的方法</span><br>  <span class="hljs-keyword">static</span> Future&lt;<span class="hljs-built_in">bool</span>&gt; cleanPhone() <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> _pre.setString(CacheKey.PHONE, <span class="hljs-string">&#x27;&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">//  封装获取phone的方法</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-built_in">String?</span> <span class="hljs-keyword">get</span> phone =&gt; _pre.getString(CacheKey.PHONE);<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>首页代码如下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs dart">Future&lt;<span class="hljs-keyword">void</span>&gt; main() <span class="hljs-keyword">async</span> &#123;<br>  <span class="hljs-comment">//  这条语句一定要加上，不然会报错，具体原因可以搜一下，这里就不解释了</span><br>  WidgetsFlutterBinding.ensureInitialized();<br>  <span class="hljs-comment">//  初始化缓存工具类</span><br>  <span class="hljs-keyword">await</span> AppCache.init();<br>  runApp(MyApp());<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      theme: ThemeData(<br>        primarySwatch: Colors.blue,<br>      ),<br>      home: HomePage(),<br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomePage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> HomePage(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  _HomePageState createState() =&gt; _HomePageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_HomePageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">HomePage</span>&gt; </span>&#123;<br>  <span class="hljs-built_in">String?</span> phone;<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> didChangeDependencies() &#123;<br>    <span class="hljs-keyword">super</span>.didChangeDependencies();<br>    getPhone();<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> getPhone() &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;获取手机号码&#x27;</span>);<br>    setState(() &#123;<br>      <span class="hljs-comment">//  使用方法，直接调用工具类设置的一些get方法就可以获取想要的数据了</span><br>      phone = AppCache.phone;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&#x27;Cache demo&#x27;</span>),<br>        centerTitle: <span class="hljs-keyword">true</span>,<br>      ),<br>      body: Center(<br>        child: Column(<br>          mainAxisAlignment: MainAxisAlignment.center,<br>          children: [<br>            Text(<span class="hljs-string">&#x27;当前保存的手机号码是：<span class="hljs-subst">$phone</span>&#x27;</span>),<br>            ElevatedButton(<br>              onPressed: () <span class="hljs-keyword">async</span> &#123;<br>                <span class="hljs-comment">//  保存手机号</span><br>                <span class="hljs-keyword">await</span> AppCache.setPhone(<span class="hljs-string">&#x27;137xxxxxxxx&#x27;</span>);<br>                getPhone();<br>              &#125;,<br>              child: Text(<span class="hljs-string">&#x27;保存&#x27;</span>),<br>            ),<br>            ElevatedButton(<br>              onPressed: () <span class="hljs-keyword">async</span> &#123;<br>                <span class="hljs-comment">//  清除手机号</span><br>                <span class="hljs-keyword">await</span> AppCache.cleanPhone();<br>                getPhone();<br>              &#125;,<br>              child: Text(<span class="hljs-string">&#x27;清除&#x27;</span>),<br>            ),<br>          ],<br>        ),<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>附上demo图，点击保存，重新打开app，手机号还在，完结。感谢看完的小伙伴，倘若有更好的实现方式欢迎一起交流啊  ^_^</p></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/efe88fecd7144423a54d647be024bc87~tplv-k3u1fbpfcp-watermark.image" alt="img.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>关于</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<h2 id="个人技术栈"><a href="#个人技术栈" class="headerlink" title="个人技术栈"></a>个人技术栈</h2><h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h3><blockquote><p>JavaScript &#x2F; TypeScript</p></blockquote><blockquote><p>Dart</p></blockquote><h3 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h3><blockquote><p>Vue2，Vue3</p></blockquote><blockquote><p>Flutter</p></blockquote>]]></content>
    
  </entry>
  
  
  
</search>
